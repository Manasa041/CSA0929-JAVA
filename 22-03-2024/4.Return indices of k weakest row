import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[][] mat1 = {
                {1,1,0,0,0},
                {1,1,1,1,0},
                {1,0,0,0,0},
                {1,1,0,0,0},
                {1,1,1,1,1}
        };
        int k1 = 3;
        System.out.println(Arrays.toString(kWeakestRows(mat1, k1))); // Output: [2, 0, 3]

        int[][] mat2 = {
                {1, 0, 0, 0},
                {1, 1, 1, 1},
                {1, 0, 0, 0},
                {1, 0, 0, 0}
        };
        int k2 = 2;
        System.out.println(Arrays.toString(kWeakestRows(mat2, k2))); // Output: [0, 2]
    }

    public static int[] kWeakestRows(int[][] mat, int k) {
        int m = mat.length;
        int n = mat[0].length;

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[1] != b[1])
                return a[1] - b[1];
            return a[0] - b[0];
        });

        for (int i = 0; i < m; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1)
                    count++;
                else
                    break;
            }
            pq.offer(new int[]{i, count});
        }

        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = pq.poll()[0];
        }

        return result;
    }
}

OUTPUT:
[2, 0, 3]
[0, 2]

Process finished with exit code 0
